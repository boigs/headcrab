name: Rust
on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.ref || github.run_id }}
  cancel-in-progress: true    

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: 1.72.1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@439cf607258077187679211f12aa6f19af4a0af7
        with:
          toolchain: ${{ env.RUST_VERSION }}
      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@a95ba195448af2da9b00fb742d14ffaaf3c21f43
      - name: Cargo Test
        run: cargo test --all-features
    
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@439cf607258077187679211f12aa6f19af4a0af7
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt
      - name: Cargo Format
        run: cargo fmt --all --check

  linter:
    name: Linter Check
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@439cf607258077187679211f12aa6f19af4a0af7
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy
      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@a95ba195448af2da9b00fb742d14ffaaf3c21f43
      - name: Cargo Clippy
        run: cargo clippy -- -D warnings

  build-deploy:
    name: Build and Deploy
    if: github.ref == 'refs/heads/main'
    needs: [test, format, linter]
    runs-on: self-hosted
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@439cf607258077187679211f12aa6f19af4a0af7
        with:
          toolchain: ${{ env.RUST_VERSION }}
      - name: Install Cargo-Get and Cargo-Edit
        run: cargo install cargo-get cargo-edit
      - name: Get Current Version
        id: get_versions
        # We do a post deploy increment of the version, this means the we consider the current committed version as the next version to release
        # Increment the patch version but add a release candidate tag to make it explicit that this version has not been released yet
        run: |
          current_patch=$(cargo get package.version --patch)
          current_version=$(cargo get package.version --major --minor --delimiter=".").$current_patch
          next_version=$(cargo get package.version --major --minor --delimiter=".").$(($current_patch + 1))-rc.1
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
          echo "next_version=$next_version" >> $GITHUB_OUTPUT
      - name: Get Image Name
        id: get_image_name
        run: |
          image_name=$(cargo get package.name):${{ steps.get_versions.outputs.current_version }}
          echo "image_name=$image_name" >> $GITHUB_OUTPUT
      - name: Build the Docker image
        run: docker build . --tag localhost:32000/${{ steps.get_image_name.outputs.image_name }}
      - name: Push the Docker image to microk8s's registry
        run: docker push localhost:32000/${{ steps.get_image_name.outputs.image_name }}
      - name: Set version to deploy in k8s.yaml
        run: sed -i -E "s/headcrab:version/${{ steps.get_image_name.outputs.image_name }}/g" k8s.yaml
      - name: Deploy
        run: microk8s kubectl apply -f k8s.yaml
      - name: Increment version for next release 
        run: cargo set-version ${{ steps.get_versions.outputs.next_version }}
      - name: Commit new version
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add Cargo.toml
          git commit -m "[AUTO] Increment version for next deployment"
          git push
