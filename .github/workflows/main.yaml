name: Rust
on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.ref || github.run_id }}
  cancel-in-progress: true    

env:
  CARGO_TERM_COLOR: always
  DOCKER_IMAGE_NAME: localhost:32000/headcrab
  RUST_VERSION: 1.73.0

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@439cf607258077187679211f12aa6f19af4a0af7
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@a95ba195448af2da9b00fb742d14ffaaf3c21f43

      - name: Cargo Test
        run: cargo test --all-features
    
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@439cf607258077187679211f12aa6f19af4a0af7
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt

      - name: Cargo Format
        run: cargo fmt --all --check

  linter:
    name: Linter Check
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@439cf607258077187679211f12aa6f19af4a0af7
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@a95ba195448af2da9b00fb742d14ffaaf3c21f43
        
      - name: Cargo Clippy
        run: cargo clippy -- -D warnings

  build-deploy:
    name: ${{ github.ref_name == 'main' && 'Build and Deploy' || 'Build' }}
    needs: [test, format, linter]
    runs-on: self-hosted
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@439cf607258077187679211f12aa6f19af4a0af7
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Docker Image Metadata
        id: image-metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: type=sha

      - name: Create Docker Image
        uses: docker/build-push-action@v5
        with:
          push: ${{ github.ref_name == 'main' }}
          context: .
          target: final
          tags: ${{ steps.image-metadata.outputs.tags }}
          labels: ${{ steps.image-metadata.outputs.labels }}
          provenance: false

      - name: Set version to deploy in k8s.yaml
        if: ${{ github.ref_name == 'main' }}
        run: sed -i -E "s#headcrab_image#${{ env.DOCKER_IMAGE_NAME }}:${{ steps.image-metadata.outputs.version }}#g" k8s.yaml
        
      - name: Deploy
        if: ${{ github.ref_name == 'main' }}
        run: |
          microk8s kubectl apply -f k8s.yaml
          microk8s kubectl rollout status deployment/headcrab-deployment --watch=true --timeout=60s
